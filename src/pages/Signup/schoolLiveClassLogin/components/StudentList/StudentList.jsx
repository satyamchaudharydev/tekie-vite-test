import React, { useEffect, useRef } from 'react'
import { get } from 'lodash'
import styles from './StudentList.module.scss'
import { avatarsRelativePath } from '../../../../../utils/constants/studentProfileAvatars'
import blueSpinner from "../../../../../assets/animations/blueSpinner.json";
import Lottie from 'react-lottie'
import { hs } from '../../../../../utils/size'

const StudentOption = (props) => {
    const { data: { avatar, name, rollNo, userId }, fetchingData, isAddingStudent, buddyListCursor, addToTeam } = props

    return <div style={{ pointerEvents: fetchingData ? 'none' : 'auto', background: buddyListCursor === get(props, 'index') ? '#E6F7FD' : null }} className={styles.option} onClick={() => addToTeam({ avatar, name, rollNo, userId })}>
        <div className={styles.studentDetailsContainer}>
            <img className={styles.avatar} src={avatarsRelativePath[avatar]} alt='student-avatar' />
            <div className={styles.rollNoAndNameContainer}>
                {!props.isRollNoAutoGenerated ? <span>{rollNo} - </span> : ''}
                <span className={styles.studentName}>{name}</span>
            </div>
        </div>
        {isAddingStudent && <div className={styles.addStudentLoader} style={{width:'50px',height:'50px'}}>
            
        <Lottie
                isClickToPauseDisabled
                options={{
                autoplay: true,
                animationData:blueSpinner,
                loop: true,
                style:{height:'40%',width:'40%'}
                // rendererSettings: { preserveAspectRatio: 'xMidYMid meet' },
                }}
                style={{height:'48px',width:'48px'}}
            />
             </div>}
    </div>
}

const StudentList = ({ students = [], rollNoOrName = '',typeOfInput='rollNo',buddyTeamList, setBuddyTeamList, setIsStudentSelected, setSelectedStudentDetails, setInput,isAlreadyPresentInSystem,setIsAlreadyPresentInSystem,setStep,setPassword,fetchingData,setFetchingData, isRollNoAutoGenerated = false, input, studentsBuddyTeamList, setStudentsBuddyTeamList, buddyListCursor, addToTeam, isAddingStudent, scrollDown, setScrollDown, scrollUp, setScrollUp }) => {
    const studentListRef = useRef(null);

    useEffect(() => {
        if (scrollDown) {
            studentListRef.current.scrollTop += hs(80)
            setScrollDown(false)
        }
    }, [scrollDown])

    useEffect(() => {
        if (scrollUp) {
            studentListRef.current.scrollTop -= hs(80)
            setScrollUp(false)
        }
    }, [scrollUp])

    useEffect(() => {
        let studentsFilteredByBuddyTeam
        const isStudentNotInTeam=(student)=>{
            const found = buddyTeamList.find(buddy=>get(buddy,'userId')===get(student,'userId'))
            return found?false:true
        }
        if(typeOfInput==='rollNo'){
            let studentsFilteredByRollNo = []
            let longestRollNos = ''
            if (students.length > 0) {
                for (let i = 0; i < students.length; i++) {
                    if (get(students[i], 'rollNo').length > longestRollNos.length) {
                        longestRollNos = get(students[i], 'rollNo')
                    }
                }
            }
            if(longestRollNos.length === 2 && rollNoOrName){
                studentsFilteredByRollNo = students.filter(student => get(student, 'rollNo').startsWith(rollNoOrName))
            }
            if (longestRollNos.length > 2 && rollNoOrName) {
                studentsFilteredByRollNo = students.filter(student => get(student, 'rollNo').includes(rollNoOrName))
            }
            if (longestRollNos.length < 2 && rollNoOrName) {
                studentsFilteredByRollNo = students.filter(student => get(student, 'rollNo') === rollNoOrName)
            }
            studentsFilteredByBuddyTeam= studentsFilteredByRollNo.filter(isStudentNotInTeam)
    
    
        }else{
            //rollNoOrName will always be name in this block
            let studentsFilteredByName=[]
            const nameOrSurname = new RegExp(rollNoOrName, "gi");
            studentsFilteredByName = students.filter(student => {
                const result = get(student, 'name').match(nameOrSurname)
                if (result && result.length) return true
                return false;
            }).sort((stud1, stud2) => get(stud1, 'rollNo') - get(stud2, 'rollNo'))
            studentsFilteredByBuddyTeam= studentsFilteredByName.filter(isStudentNotInTeam)
        }
        if (!isRollNoAutoGenerated) {
            studentsFilteredByBuddyTeam = studentsFilteredByBuddyTeam.sort((student1, student2) => get(student1, 'rollNo') - get(student2, 'rollNo'))
        }
        setStudentsBuddyTeamList(studentsFilteredByBuddyTeam)
    }, [input])
    return <ul className={styles.listContainer} ref={studentListRef}>
    {
        (studentsBuddyTeamList && studentsBuddyTeamList.length) ? studentsBuddyTeamList.map((student, index) => <StudentOption index={index} fetchingData={fetchingData} setFetchingData={setFetchingData} setIsStudentSelected={setIsStudentSelected} setSelectedStudentDetails={setSelectedStudentDetails} setBuddyTeamList={setBuddyTeamList} key={get(student, 'userId')} setInput={setInput} data={{ avatar: get(student, 'profileAvatar'), name: get(student, 'name'), grade: get(student, 'grade'), section: get(student, 'section'), rollNo: get(student, 'rollNo'), userId: get(student, 'userId') }} isAlreadyPresentInSystem={isAlreadyPresentInSystem}setIsAlreadyPresentInSystem={setIsAlreadyPresentInSystem} setStep={setStep} setPassword={setPassword} isRollNoAutoGenerated={isRollNoAutoGenerated} buddyListCursor={buddyListCursor} addToTeam={addToTeam} isAddingStudent={isAddingStudent} />) : null
    }
</ul>
}

export default React.memo(StudentList)